import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class ECommerceApp extends JFrame {
    private CardLayout cardLayout;
    private JPanel cardPanel;
    private LoginSignupPage loginSignupPage;
    private InventoryPage inventoryPage;
    private ShoppingCartPage shoppingCartPage;
    private ConfirmationPage confirmationPage;
    private ReceiptPage receiptPage;

    private List<Item> inventory;
    private List<Item> shoppingCart;

    public ECommerceApp() {
        setTitle("E-Commerce App");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Initialize inventory
        inventory = new ArrayList<>();
        inventory.add(new Item("Nvidia GEFORCE RTX 3080", "High performance Gaming Graphics card", 400.99, "item1.jpg"));
        inventory.add(new Item("AMD Ryzen 5500", "Mid-level gaming processor, can handle most newer games", 129.99, "item2.jpg"));
        inventory.add(new Item("Asus B550 Motherboard", "Affordable gaming motherboard", 85.00, "item3.jpg"));

        // Initialize shopping cart
        shoppingCart = new ArrayList<>();

        // Initialize card layout
        cardLayout = new CardLayout();
        cardPanel = new JPanel(cardLayout);

        // Create Login/Signup page
        loginSignupPage = new LoginSignupPage();
        loginSignupPage.setLoginSignupListener(new LoginSignupListener() {
            @Override
            public void onLogin(String username, String password) {
                // Simplified authentication, you should implement proper authentication logic
                if ("user".equals(username) && "password".equals(password)) {
                    cardLayout.show(cardPanel, "inventoryPage");
                } else {
                    JOptionPane.showMessageDialog(ECommerceApp.this, "Invalid credentials");
                }
            }

            @Override
            public void onSignup() {
                // Implement signup logic
            }
        });

        // Create Inventory page
        inventoryPage = new InventoryPage(inventory);
        inventoryPage.setInventoryListener(new InventoryListener() {
            @Override
            public void onAddToCart(Item item) {
                shoppingCart.add(item);
                shoppingCartPage.updateCart();
            }

            @Override
            public void onViewCart() {
                cardLayout.show(cardPanel, "shoppingCartPage");
            }
        });

        // Create Shopping Cart page
        shoppingCartPage = new ShoppingCartPage(shoppingCart);
        shoppingCartPage.setCartListener(new CartListener() {
            @Override
            public void onCheckout() {
                cardLayout.show(cardPanel, "confirmationPage");
            }
        });

        // Create Confirmation page
        confirmationPage = new ConfirmationPage();
        confirmationPage.setConfirmationListener(new ConfirmationListener() {
            @Override
            public void onConfirm() {
                // Implement order processing logic
                cardLayout.show(cardPanel, "receiptPage");
            }

            @Override
            public void onCancel() {
                cardLayout.show(cardPanel, "shoppingCartPage");
            }
        });

        // Create Receipt page
        receiptPage = new ReceiptPage();
        receiptPage.setReceiptListener(new ReceiptListener() {
            @Override
            public void onReturn() {
                shoppingCart.clear();
                cardLayout.show(cardPanel, "inventoryPage");
            }
        });

        // Add pages to card panel
        cardPanel.add(loginSignupPage, "loginSignupPage");
        cardPanel.add(inventoryPage, "inventoryPage");
        cardPanel.add(shoppingCartPage, "shoppingCartPage");
        cardPanel.add(confirmationPage, "confirmationPage");
        cardPanel.add(receiptPage, "receiptPage");

        // Show login/signup page initially
        cardLayout.show(cardPanel, "loginSignupPage");

        // Add card panel to the frame
        add(cardPanel);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new ECommerceApp().setVisible(true);
        });
    }
}

class Item {
    private String name;
    private String description;
    private double price;
    private String imagePath;

    public Item(String name, String description, double price, String imagePath) {
        this.name = name;
        this.description = description;
        this.price = price;
        this.imagePath = imagePath;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public double getPrice() {
        return price;
    }

    public String getImagePath() {
        return imagePath;
    }

    @Override
    public String toString() {
        return name;
    }
}

interface LoginSignupListener {
    void onLogin(String username, String password);
    void onSignup();
}

interface InventoryListener {
    void onAddToCart(Item item);
    void onViewCart();
}

interface CartListener {
    void onCheckout();
}

interface ConfirmationListener {
    void onConfirm();
    void onCancel();
}

interface ReceiptListener {
    void onReturn();
}

class LoginSignupPage extends JPanel {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JButton signupButton;

    private LoginSignupListener listener;

    public LoginSignupPage() {
        setLayout(new GridLayout(4, 2));

        usernameField = new JTextField(30);
        passwordField = new JPasswordField(30);
        loginButton = new JButton("Login");
        signupButton = new JButton("Signup");

        add(new JLabel("Username:"));
        add(usernameField);
        add(new JLabel("Password:"));
        add(passwordField);
        add(loginButton);
        add(signupButton);

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                char[] password = passwordField.getPassword();
                listener.onLogin(username, new String(password));
            }
        });

        signupButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listener.onSignup();
            }
        });
    }

    public void setLoginSignupListener(LoginSignupListener listener) {
        this.listener = listener;
    }
}

class InventoryPage extends JPanel {
    private DefaultListModel<Item> itemListModel;
    private JList<Item> itemList;
    private JButton addToCartButton;
    private JButton viewCartButton;

    private List<Item> inventory;
    private InventoryListener listener;

    public InventoryPage(List<Item> inventory) {
        setLayout(new BorderLayout());

        this.inventory = inventory;

        itemListModel = new DefaultListModel<>();
        for (Item item : inventory) {
            itemListModel.addElement(item);
        }

        itemList = new JList<>(itemListModel);
        itemList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        itemList.addListSelectionListener(e -> showItemDetails(itemList.getSelectedValue()));

        addToCartButton = new JButton("Add To Cart");
        addToCartButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Item selectedItem = itemList.getSelectedValue();
                if (selectedItem != null) {
                    listener.onAddToCart(selectedItem);
                }
            }
        });

        viewCartButton = new JButton("View Cart");
        viewCartButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listener.onViewCart();
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addToCartButton);
        buttonPanel.add(viewCartButton);

        add(new JScrollPane(itemList), BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
    }

    private void showItemDetails(Item selectedItem) {
        // Implement showing item details (description, price, image) as needed
    }

    public void setInventoryListener(InventoryListener listener) {
        this.listener = listener;
    }
}

class ShoppingCartPage extends JPanel {
    private DefaultListModel<Item> cartListModel;
    private JList<Item> cartList;
    private JButton checkoutButton;

    private List<Item> shoppingCart;
    private CartListener listener;

    public ShoppingCartPage(List<Item> shoppingCart) {
        setLayout(new BorderLayout());

        this.shoppingCart = shoppingCart;

        cartListModel = new DefaultListModel<>();
        cartList = new JList<>(cartListModel);

        checkoutButton = new JButton("Checkout");
        checkoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listener.onCheckout();
            }
        });

        add(new JScrollPane(cartList), BorderLayout.CENTER);
        add(checkoutButton, BorderLayout.SOUTH);
    }

    public void updateCart() {
        cartListModel.clear();
        for (Item item : shoppingCart) {
            cartListModel.addElement(item);
        }
    }

    public void setCartListener(CartListener listener) {
        this.listener = listener;
    }
}

class ConfirmationPage extends JPanel {
    private JButton confirmButton;
    private JButton cancelButton;

    private ConfirmationListener listener;

    public ConfirmationPage() {
        setLayout(new GridLayout(2, 1));

        confirmButton = new JButton("Confirm");
        confirmButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listener.onConfirm();
            }
        });

        cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listener.onCancel();
            }
        });

        add(confirmButton);
        add(cancelButton);
    }

    public void setConfirmationListener(ConfirmationListener listener) {
        this.listener = listener;
    }
}

class ReceiptPage extends JPanel {
    private JButton returnButton;

    private ReceiptListener listener;

    public ReceiptPage() {
        setLayout(new BorderLayout());

        returnButton = new JButton("Return");
        returnButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listener.onReturn();
            }
        });

        add(returnButton, BorderLayout.SOUTH);
    }

    public void setReceiptListener(ReceiptListener listener) {
        this.listener = listener;
    }
}
